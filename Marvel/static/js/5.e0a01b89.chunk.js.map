{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","comics","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","decoration","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/5.e0a01b89.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 60000);\r\n\r\n        return () => {\r\n            clearInterval(timerId)\r\n        }\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        \r\n        setChar(char);\r\n    }\r\n\r\n   \r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\r\n        \r\n        getCharacter(id)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = char;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    \r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n    \r\n    const {loading, error, getAllCharacters} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        \r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded);\r\n            \r\n    }\r\n\r\n    \r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        \r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n\r\n    \r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        \r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    // Этот метод создан для оптимизации, \r\n    // чтобы не помещать такую конструкцию в метод render\r\n    function renderItems(arr) {\r\n        const items =  arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n            \r\n            return (\r\n                <li \r\n                    className=\"char__item\"\r\n                    tabIndex={0}\r\n                    ref={el => itemRefs.current[i] = el}\r\n                    key={item.id}\r\n                    onClick={() => {\r\n                        props.onCharSelected(item.id);\r\n                        focusOnItem(i);\r\n                    }}\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === ' ' || e.key === \"Enter\") {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }\r\n                    }}>\r\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n                        <div className=\"char__name\">{item.name}</div>\r\n                </li>\r\n            )\r\n        });\r\n        // А эта конструкция вынесена для центровки спиннера/ошибки\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n    \r\n    const items = renderItems(charList);\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n    \r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{'display': charEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\nimport './charInfo.scss';\r\n\r\n\r\nconst CharInfo = (props) =>  {\r\n    \r\n    const [char, setChar] = useState(null);\r\n    \r\n    \r\n    \r\n    const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n\r\n    }, [props.charId])\r\n\r\n    \r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        clearError();\r\n        \r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            \r\n    }\r\n\r\n\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n        \r\n        \r\n    }\r\n\r\n    \r\n\r\n    \r\n        \r\n        const skeleton = char || loading || error ? null : <Skeleton/>;\r\n        const errorMessage = error ? <ErrorMessage/> : null;\r\n        const spinner = loading ? <Spinner/> : null;\r\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\r\n\r\n        return (\r\n            <div className=\"char__info\">\r\n               {skeleton}\r\n               {errorMessage}\r\n               {spinner}\r\n               {content}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\r\n\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imgStyle}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics with this character'}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        if (i > 9) return;\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=b43ce43f3ebb68376c46e4f302e81ee0';\r\n    const _baseOffset = 210;\r\n\r\n    \r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'aplication/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n    \r\n}"],"sourceRoot":""}